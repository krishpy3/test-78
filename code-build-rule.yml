AWSTemplateFormatVersion: 2010-09-09
Description: |
  This template instantiates an EventBridge rule to trigger sns on an s3 event
Parameters:
  SNSArn:
    Type: String
    Description: SNS to send notification to
    Default: arn:aws:sns:us-east-1:938540043867:esg-datacapture-dev-s3copyTopicus-east-1
  ProjectName:
    Type: String
    Description: CodeBuild Project Name
    Default: esgds-s3-bucket-copy-build
  OurBucket:
    Type: String
    Default: mra-esg-esgds-test-us-east-1
  ESGDSBucket:
    Type: String
    Default: mra-esg-esgds-test-ap-southeast-1

Resources:
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: myLambdaRoleForS3CopySNS
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: sns-publish-and-s3-read-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:List*'
                  - 'SNS:Publish'
                Resource: '*' 

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.8
      Handler: index.handler
      Timeout: 300
      Code:
        ZipFile:
          'Fn::Join': 
            - ''
            - - |
                from datetime import datetime
                import boto3
              - 'buckets = "'
              - !Ref OurBucket
              - '", "'
              - !Ref ESGDSBucket
              - '"'
              - |
                #buckets
                folder = ['Deliverables', 'DiscussionDocs', 'SupportingDocs']
                def handler(event, context):
                  today = datetime.strftime(datetime.today(), '%m%d%Y')
                  s3 = boto3.client('s3')
                  sns = boto3.client('sns') 
                  check = []
                  for bucket in buckets:
                      for fol in folder:
                          keys = s3.list_objects_v2(Bucket=bucket,
                                                  Prefix=f'Outbox/{fol}/{today}/')
                          if keys['KeyCount']:
                              check.append(keys['KeyCount'] - 1)
                  if any(check):
                      msg = 'Files copied successfully.\n'\
                          f"Project Name: {event['detail']['project-name']}\n"\
                          f"Build-ID {event['detail']['build-id']}."
                      sns.publish(Subject='CodeBuild Notification',
                                  Message=msg,
              - '      TopicArn="'
              - !Ref SNSArn
              - '")'                          

  EventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: codebuild-send-notification
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'SNS:Publish'
                Resource: !Ref SNSArn
      RoleName: CodeBuildSNSEventRole

  Event:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Rule to trigger a sns on a successful codebuild copy job
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail:
          build-status:
            - SUCCEEDED
          project-name:
            - !Ref ProjectName
      State: "ENABLED"
      RoleArn:
        Fn::GetAtt:
          - EventRole
          - Arn
      Targets:
        - Arn: !Ref SNSArn
          Id: SNS
          InputTransformer:
            InputPathsMap:
              build-id : "$.detail.build-id"
              project-name: "$.detail.project-name"
              build-status: "$.detail.build-status"
            InputTemplate: |
              "Current status of code project '<project-name>' with Build-ID '<build-id>' is '<build-status>'."
        - Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "Event"
          - "Arn"
