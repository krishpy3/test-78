AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  stage:
    Type: String
    Default: dev

Resources:
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: myLambdaRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Policy_dynamo-stream-lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Describe*"
                  - "ssm:PutParameter"
                  - "ssm:GetParameterHistory"
                  - "ssm:GetParametersByPath"
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                Resource: '*'

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mylambdaFunction
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.8
      Handler: index.handler
      Code:
        ZipFile: !Sub
          | 
          import boto3

          def handler(events, context):
              table_name = "workflow-${stage}-answers"
              dynamodb = boto3.client('dynamodb')
              res = dynamodb.describe_table(TableName=table_name)
              arn = res['Table'].get('LatestStreamArn')

              ssm = boto3.client('ssm')
              res = ssm.put_parameter(
                  Name=f'/dynamodb/us-east-1/stream/Dynamodb-stream-arn-entry-${stage}',
                  Value=arn,
                  Type='String',
                  Overwrite=True)
              return {'message': "Arn updated in parameter store"}

  Event:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Rule to trigger a sns on a successful codebuild copy job
      EventPattern:
        source:
          - aws.dynamodb
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - dynamodb.amazonaws.com
          eventName:
            - CreateTable
            - UpdateTable
      State: "ENABLED"
      Targets: 
        - Arn: 
            Fn::GetAtt: 
              - "lambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"


  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "lambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "Event"
          - "Arn"
